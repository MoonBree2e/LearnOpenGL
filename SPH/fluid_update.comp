#version 460 core
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

const vec3 MAX_SPEED = vec3(50);

struct Particle {
    vec3 position;
    vec3 velocity;
    float pressure;
    float density;
};

layout(std430, binding = 0) restrict readonly buffer InParticles {
    Particle inParticles[];
};

layout(std430, binding = 1) restrict readonly buffer Counts {
    uint counts[];
};

layout(std430, binding = 2) restrict readonly buffer Offsets {
    uint offsets[];
};

layout(std430, binding = 3) restrict writeonly buffer OutParticles {
    Particle outParticles[];
};

uniform float BoxSize;
uniform float GridSpacing;
uniform ivec3 GridRes;
uniform float dt;
uniform uint ParticlesNum;
uniform vec3 Gravity;
uniform float ParticleMass;
uniform float KernelRadius;
uniform float ViscosityCoefficient;
uniform float SpikyKernelConst;
uniform float ViscosityKernelConst;

const ivec3 NEIGHBORHOOD[27] = {
    ivec3(-1, -1, -1), ivec3(-1, -1,  0), ivec3(-1, -1,  1),
    ivec3(-1,  0, -1), ivec3(-1,  0,  0), ivec3(-1,  0,  1),
    ivec3(-1,  1, -1), ivec3(-1,  1,  0), ivec3(-1,  1,  1),
    ivec3( 0, -1, -1), ivec3( 0, -1,  0), ivec3( 0, -1,  1),
    ivec3( 0,  0, -1), ivec3( 0,  0,  0), ivec3( 0,  0,  1),
    ivec3( 0,  1, -1), ivec3( 0,  1,  0), ivec3( 0,  1,  1),
    ivec3( 1, -1, -1), ivec3( 1, -1,  0), ivec3( 1, -1,  1),
    ivec3( 1,  0, -1), ivec3( 1,  0,  0), ivec3( 1,  0,  1),
    ivec3( 1,  1, -1), ivec3( 1,  1,  0), ivec3( 1,  1,  1)
};

// Equation (8) from Harada
vec3 spikyKernel(vec3 r, float d) {
    return pow (KernelRadius - d, 2) * (r / d) * SpikyKernelConst;
}

// Equation (9) from Harada
// weight viscosity
float Wvis(float r) {
    return (KernelRadius - r) * ViscosityKernelConst;
}

vec3 wallForces(vec3 p) {
    vec3 force = vec3(0);
    vec3 r;

    if (p.x < KernelRadius) {
        r = vec3(0, p.y, p.z) - p;
        force += spikyKernel(r, r.length());
    } else if (p.x > BoxSize - KernelRadius) {
        r = vec3(BoxSize, p.y, p.z) - p;
        force += spikyKernel(r, r.length());
    }

    if (p.y < KernelRadius) {
        r = vec3(p.x, 0, p.z) - p;
        force += spikyKernel(r, r.length());
    } else if (p.y > BoxSize - KernelRadius) {
        r = vec3(p.x, BoxSize, p.z) - p;
        force += spikyKernel(r, r.length());
    }

    if (p.z < KernelRadius) {
        r = vec3(p.x, p.y, 0) - p;
        force += spikyKernel(r, r.length());
    } else if (p.z > BoxSize - KernelRadius) {
        r = vec3(p.x, p.y, BoxSize) - p;
        force += spikyKernel(r, r.length());
    }

    return force * 0.01;
}

void main(){
    const uint particleID = gl_GlobalInvocationID.x;
    if(particleID >= ParticlesNum) return;

    Particle p = inParticles[particleID];
    const ivec3 pGridCoord = clamp(ivec3(p.position / GridSpacing), ivec3(0), GridRes - 1);

    vec3 pressureForce = vec3(0);
    vec3 viscosityForce = vec3(0);
    vec3 externalForces = Gravity * p.density;

    #pragma unroll 1
    for(uint gridCellDir = 0; gridCellDir < 27; ++gridCellDir) {
        const ivec3 tCoord = pGridCoord + NEIGHBORHOOD[gridCellDir];

        if(any(lessThan(tCoord, ivec3(0))) || any(greaterThanEqual(tCoord, GridRes))) continue;

        const uint index = tCoord.z * GridRes.y * GridRes.x + tCoord.y * GridRes.x + tCoord.x;
        const uint count = counts[index];
        const uint offset = counts[index];

        for (uint i = 0; i < count; ++i) {
            const uint otherParticleID = offset + i;
            if (particleID == otherParticleID) continue;

            Particle otherParticle = inParticles[otherParticleID];

            // find the distance, ignore if too far
            const vec3 r = p.position - otherParticle.position;
            const float dist = length(r);
            if (dist >= KernelRadius)  continue;

            // Equation (6) from Harada
            const float pressure = (p.pressure + otherParticle.pressure) / (2.0 * otherParticle.density);
            if(pressure > 0) {
                vec3 mPressureWeight = spikyKernel(r, dist + 1e-16);
                pressureForce -= ParticleMass * pressure * mPressureWeight;
            }

            // Equation (7) from Harada
            const vec3 velocityDiff = otherParticle.velocity - p.velocity;

            viscosityForce += ParticleMass * (velocityDiff / otherParticle.density) * Wvis(dist);
        }
    }
    externalForces += wallForces(p.position); // + mouseForce(p)

    // Sum of Equations (6) and (7) and external forces from Herada
    viscosityForce += ViscosityCoefficient;
    const vec3 force = pressureForce + viscosityForce + externalForces;

    // find the accelaration and integrate
    const vec3 acceleration = force / (p.density + 1e-16);
    vec3 vel = clamp(p.velocity + acceleration * dt, -MAX_SPEED, MAX_SPEED);
    vec3 pos = p.position + vel * dt;

    const float wallDamping = 0.3;
    const float borderPadding = 0.001;

    if (pos.x < borderPadding) {
        vel.x *= -wallDamping;
        pos.x = borderPadding;
    } else if (pos.x > BoxSize - borderPadding) {
        vel.x *= -wallDamping;
        pos.x = BoxSize - borderPadding;
    }

    if (pos.y < borderPadding) {
        vel.y *= -wallDamping;
        pos.y  = borderPadding;
    } else if (pos.y > BoxSize - borderPadding) {
        vel.y *= -wallDamping;
        pos.y = BoxSize - borderPadding;
    }

    if (pos.z < borderPadding) {
        vel.z *= -wallDamping;
        pos.z = borderPadding;
    } else if (pos.z > BoxSize - borderPadding) {
        vel.z *= -wallDamping;
        pos.z = BoxSize - borderPadding;
    }

    p.velocity = vel;
    p.position = pos;
    outParticles[particleID] = p;
}