// _AUGEN_BEGIN_INCLUDE D:\Repo\GrainViewer\share\shaders\grain\globalatomic-splitter.comp.glsl
#version 450 core
// _AUGEN_BEGIN_INCLUDE sys:defines
#define RENDER_TYPE_CACHE
#define STEP_OFFSET
// _AUGEN_END_INCLUDE sys:defines
// _AUGEN_BEGIN_INCLUDE sys:settings
#define LOCAL_SIZE_X 128
// _AUGEN_END_INCLUDE sys:settings

layout (local_size_x = LOCAL_SIZE_X, local_size_y = 1, local_size_z = 1) in;

struct PointCloundVboEntry {
	vec4 position;
};

struct Counter {
	uint count;
	uint offset;
};

uniform uint uPointCount; // number of elements to draw a priori, ie points per frame
uniform uint uRenderModelCount = 2;
uniform uint uFrameCount;
uniform float uFps = 25.0;
uniform float uTime;

layout(std430, binding = 0) restrict buffer countersSsbo {
	Counter counters[];
};
layout (std430, binding = 2) restrict writeonly buffer elementBufferSsbo {
	uint elementBuffer[];
};

// _AUGEN_BEGIN_INCLUDE D:\Repo\GrainViewer\share\shaders\grain\../include/anim.inc.glsl

// depreciated
uint AnimatedPointId(uint pointId, uint frameCount, uint pointCount, float time, float fps) {
	uint pointCountPerFrame = pointCount / frameCount;
	uint frame = uint(time * fps) % max(1, frameCount);
	return pointId + pointCountPerFrame * frame;
}

// better: pointCount is the point count per frame, not the total size of the buffer
uint AnimatedPointId2(uint pointId, uint frameCount, uint pointCount, float time, float fps) {
	uint frame = uint(time * fps) % max(1, frameCount);
	return pointId + pointCount * frame;
}

// _AUGEN_END_INCLUDE


layout(std430, binding = 1) restrict readonly buffer renderTypeSsbo {
	uint renderType[];
};

uint getRenderType(uint element) {
	return renderType[element];
}

void main() {
	uint i = gl_GlobalInvocationID.x;
	if (i >= uPointCount) return;
	uint type, beforeIncrement;

// Compute offsets (shader invoked only once at this step)
	counters[0].offset = 0;
	for (type = 0 ; type < uRenderModelCount - 1 ; ++type) {
		counters[type + 1].offset = counters[type].offset + counters[type].count;
		counters[type].count = 0;
	}
	counters[uRenderModelCount - 1].count = 0;
}
// _AUGEN_END_INCLUDE
